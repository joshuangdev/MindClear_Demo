package com.mang0.mindcleardemo

import android.app.*
import android.content.Context
import android.content.Intent
import android.os.*
import android.util.Log
import androidx.core.app.NotificationCompat
import java.util.Calendar
import android.os.PowerManager

/**
 * üß† ForegroundAppWatcherService
 *
 * Bu servis, cihazda √∂nde (foreground) √ßalƒ±≈üan uygulamalarƒ± **s√ºrekli olarak izler**.
 * Kullanƒ±cƒ± bir uygulamayƒ± a√ßtƒ±ƒüƒ±nda, AppStatsManager‚Äôdaki kurallar (s√ºre, a√ßƒ±lƒ±≈ü sayƒ±sƒ±, g√ºn)
 * ihlal edilmi≈üse **engelleme ekranƒ±nƒ±** g√∂sterir.
 *
 * Servis foreground modda √ßalƒ±≈üƒ±r, bu sayede:
 * - Android tarafƒ±ndan kolayca √∂ld√ºr√ºlmez.
 * - Kullanƒ±cƒ±nƒ±n arka planda s√ºrekli izlenmesi m√ºmk√ºnd√ºr.
 *
 * üß© Temel G√∂rev Akƒ±≈üƒ±:
 * 1. Her 2 saniyede bir `ForegroundAppDetector.getForegroundApp()` √ßaƒürƒ±lƒ±r.
 * 2. Yeni bir uygulama tespit edilirse ‚Üí a√ßƒ±lƒ±≈ü sayƒ±sƒ± ve s√ºre ba≈ülatƒ±lƒ±r.
 * 3. Aynƒ± uygulama ise ‚Üí s√ºre artƒ±≈üƒ± hesaplanƒ±r.
 * 4. Limit a≈üƒ±ldƒ±ysa ‚Üí `BlockedActivity` ekranƒ± a√ßƒ±lƒ±r.
 */
class ForegroundAppWatcherService : Service() {

    private var handler: Handler? = null               // D√∂ng√º kontrol√º i√ßin handler
    private var lastCheckedPackage: String? = null     // En son izlenen uygulama
    private var isRunning = false                      // Servisin √ßalƒ±≈üƒ±p √ßalƒ±≈ümadƒ±ƒüƒ±
    private var foregroundStartTime: Long = 0          // Uygulamanƒ±n √∂n plana geldiƒüi an (ms)
    private lateinit var powerManager: PowerManager
    private var temporaryLastPackage: String? = null   // Ekran a√ß/kapa gibi ge√ßici d√∂n√º≈üleri y√∂netmek i√ßin

    companion object {
        private const val TAG = "ForegroundAppWatcher"
        private const val NOTIFICATION_ID = 1
        private const val CHANNEL_ID = "app_watcher_channel"
        private const val RESTART_DELAY = 5000L
        private const val CHECK_INTERVAL_MS = 2000L // Kontrol sƒ±klƒ±ƒüƒ± (2 saniye)

        /**
         * Servisi ba≈ülatmak i√ßin kullanƒ±lƒ±r. (√∂rn. Boot sonrasƒ± veya RestartReceiver √ºzerinden)
         */
        fun startForegroundWatcher(context: Context) {
            try {
                Log.d(TAG, "üöÄ Servis ba≈ülatma isteƒüi g√∂nderiliyor...")
                val serviceIntent = Intent(context, ForegroundAppWatcherService::class.java)
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O)
                    context.startForegroundService(serviceIntent)
                else
                    context.startService(serviceIntent)
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Servis ba≈ülatƒ±lamadƒ±: ${e.message}")
            }
        }
    }

    /**
     * Servisin kalbini olu≈üturan Runnable.
     * Her 2 saniyede bir √ßalƒ±≈üƒ±r ve √∂nde hangi uygulama olduƒüunu tespit eder.
     */
    private val checkRunnable = object : Runnable {
        override fun run() {
            try {
                Log.d(TAG, "=== YENƒ∞ KONTROL D√ñNG√úS√ú ===")

                // üîã Ekran kapalƒ±ysa s√ºre sayƒ±mƒ±nƒ± durdur (√∂rnek: kullanƒ±cƒ± telefonu cebine koydu)
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT_WATCH && !powerManager.isInteractive) {
                    Log.i(TAG, "üò¥ Ekran kapalƒ±. S√ºre sayƒ±mƒ± durduruldu.")
                    scheduleNextCheck()
                    return
                }

                // üìõ ƒ∞zin kontrol√º (UsageStats eri≈üimi olmadan tespit yapƒ±lamaz)
                if (!ForegroundAppDetector.hasUsageAccessPermission(this@ForegroundAppWatcherService)) {
                    Log.w(TAG, "‚ùå Kullanƒ±m eri≈üimi izni YOK")
                    scheduleNextCheck()
                    return
                }

                // üì± ≈ûu anda √∂nde olan uygulamayƒ± bul
                val currentApp = ForegroundAppDetector.getForegroundApp(this@ForegroundAppWatcherService)
                Log.d(TAG, "üì± Algƒ±lanan uygulama: $currentApp | √ñnceki: $lastCheckedPackage")

                if (currentApp != null) {
                    temporaryLastPackage = null // Sistem ekranlarƒ±ndan d√∂n√º≈ü varsa sƒ±fƒ±rla

                    if (currentApp != lastCheckedPackage) {
                        // Yeni bir uygulama √∂n plana geldi
                        Log.d(TAG, "üîÑ Uygulama deƒüi≈üimi: $lastCheckedPackage -> $currentApp")

                        // √ñnceki uygulamanƒ±n s√ºresini kaydet
                        if (lastCheckedPackage != null) saveTimeSpent(lastCheckedPackage!!)

                        // Yeni uygulamayƒ± aktif olarak i≈üleme al
                        lastCheckedPackage = currentApp
                        processAppSwitch(currentApp)
                    } else {
                        // Aynƒ± uygulama h√¢l√¢ √∂nde, sadece s√ºreyi g√ºncelle
                        checkBlockingCondition(currentApp)
                    }
                } else {
                    // Herhangi bir uygulama yok (√∂rnek: Ana ekran, bildirim men√ºs√º)
                    Log.d(TAG, "üîÑ Uygulama yok (Sistem aray√ºz√º). Son uygulama s√ºresi kaydediliyor.")
                    if (lastCheckedPackage != null) {
                        saveTimeSpent(lastCheckedPackage!!)
                        temporaryLastPackage = lastCheckedPackage
                        lastCheckedPackage = null
                        foregroundStartTime = 0
                    }
                }

                // Bir sonraki kontrol√º planla
                scheduleNextCheck()

            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Kontrol sƒ±rasƒ±nda hata: ${e.message}")
                scheduleNextCheck()
            }
        }
    }

    /**
     * Yeni bir uygulama √∂ne ge√ßtiƒüinde √ßaƒürƒ±lƒ±r.
     * A√ßƒ±lƒ±≈ü sayƒ±sƒ±, izinli s√ºre ve engelleme kurallarƒ± burada y√∂netilir.
     */
    private fun processAppSwitch(packageName: String) {
        foregroundStartTime = System.currentTimeMillis() // Yeni ba≈ülangƒ±√ß zamanƒ±

        val stat = AppStatsManager.getStat(this, packageName)
        if (stat != null && packageName != applicationContext.packageName) {

            val allowedSeconds = stat.allowedMinutesPerDay * 60L
            val isTimeLimitReached = stat.allowedMinutesPerDay > 0 &&
                    stat.timeSpentTodaySeconds >= allowedSeconds
            val isQuickReturn = packageName == temporaryLastPackage // ekran a√ß/kapa d√∂n√º≈ü√º

            if (!isQuickReturn) {
                // üß© S√ºre dolmu≈üsa a√ßƒ±lƒ±≈ü sayƒ±sƒ±nƒ± artƒ±rarak engelleme s√ºrecine gir
                if (isTimeLimitReached) {
                    if (stat.allowedLaunchesPerDay > 0 && stat.launchesToday < stat.allowedLaunchesPerDay) {
                        stat.launchesToday++
                        Log.w(TAG, "üìà S√ºre dolduƒüu i√ßin a√ßƒ±lƒ±≈ü sayƒ±sƒ± arttƒ±: ${stat.launchesToday}/${stat.allowedLaunchesPerDay}")
                    }
                } else {
                    // S√ºre dolmamƒ±≈üsa, yalnƒ±zca ilk a√ßƒ±lƒ±≈üta sayƒ±m yapƒ±lƒ±r
                    if (stat.launchesToday == 0) {
                        stat.launchesToday = 1
                        Log.i(TAG, "üìà ƒ∞lk a√ßƒ±lƒ±≈ü (1. kullanƒ±m ba≈ülatƒ±ldƒ±)")
                    }
                }
            } else {
                Log.d(TAG, "‚è∏Ô∏è Hƒ±zlƒ± geri d√∂n√º≈ü ‚Äî a√ßƒ±lƒ±≈ü sayƒ±sƒ± artƒ±rƒ±lmadƒ±.")
            }

            AppStatsManager.saveStat(this, stat)
            checkBlockingCondition(packageName)
            temporaryLastPackage = null
        }
    }

    /**
     * Her kontrol turunda √ßaƒürƒ±lƒ±r.
     * Uygulama limitleri a≈üƒ±ldƒ±ysa engelleme ekranƒ±nƒ± a√ßar.
     */
    private fun checkBlockingCondition(packageName: String) {
        val stat = AppStatsManager.getStat(this, packageName) ?: return
        val today = Calendar.getInstance().get(Calendar.DAY_OF_WEEK)

        saveTimeSpent(packageName) // Anlƒ±k s√ºreyi kaydet
        val (shouldBlock, reason) = AppStatsManager.shouldBlockApp(stat, today)

        if (shouldBlock) {
            Log.w(TAG, "üö´ ENGEL AKTƒ∞F: $packageName (Sebep: $reason)")
            AppStatsManager.saveStat(this, stat)
            showBlockScreen(reason ?: "Bu uygulamanƒ±n kullanƒ±m limiti doldu.")
        }
    }

    /**
     * Aktif uygulamada ge√ßirilen s√ºreyi hesaplar ve istatistiklere ekler.
     */
    private fun saveTimeSpent(packageName: String) {
        if (foregroundStartTime > 0) {
            val timeSpentMs = System.currentTimeMillis() - foregroundStartTime
            val timeSpentSeconds = timeSpentMs / 1000
            val stat = AppStatsManager.getStat(this, packageName)

            stat?.let {
                if (timeSpentSeconds > 0) {
                    it.timeSpentTodaySeconds += timeSpentSeconds
                    AppStatsManager.saveStat(this, it)
                    Log.i(TAG, "‚è∞ S√ºre g√ºncellendi: $packageName +$timeSpentSeconds sn (Toplam: ${it.timeSpentTodaySeconds})")
                }
            }
            // S√ºreyi yeniden ba≈ülat
            foregroundStartTime = System.currentTimeMillis()
        }
    }

    /** Bir sonraki kontrol√º planlar (her 2 saniyede bir √ßalƒ±≈üƒ±r). */
    private fun scheduleNextCheck() {
        if (isRunning) handler?.postDelayed(checkRunnable, CHECK_INTERVAL_MS)
    }

    /** Engelleme ekranƒ±nƒ± g√∂sterir (BlockedActivity). */
    private fun showBlockScreen(reason: String) {
        try {
            val intent = Intent(this, BlockedActivity::class.java).apply {
                addFlags(Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK)
                putExtra("BLOCK_REASON", reason)
            }
            startActivity(intent)

            lastCheckedPackage?.let { pkg ->
                AppStatsManager.getStat(this, pkg)?.let {
                    it.blockedAttempts++
                    AppStatsManager.saveStat(this, it)
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Engelleme ekranƒ± a√ßƒ±lamadƒ±: ${e.message}")
        }
    }

    // ---------------------- SERVICE LIFECYCLE ----------------------

    override fun onCreate() {
        super.onCreate()
        Log.d(TAG, "üé¨ Servis olu≈üturuldu")
        powerManager = getSystemService(Context.POWER_SERVICE) as PowerManager
        handler = Handler(Looper.getMainLooper())
        createNotificationChannel()
        startForeground(NOTIFICATION_ID, createNotification())
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        Log.d(TAG, "üöÄ Servis ba≈ülatƒ±ldƒ± (flags: $flags, id: $startId)")
        if (!isRunning) {
            isRunning = true
            handler?.post(checkRunnable)
        }
        return START_STICKY // Servis √∂ld√ºr√ºl√ºrse otomatik yeniden ba≈ülat
    }

    override fun onDestroy() {
        Log.d(TAG, "üõë Servis durduruluyor")
        isRunning = false
        handler?.removeCallbacks(checkRunnable)
        handler = null

        // Son aktif uygulamanƒ±n s√ºresini kaydet
        lastCheckedPackage?.let { saveTimeSpent(it) }

        // Otomatik yeniden ba≈ülatma mekanizmasƒ±
        Handler(Looper.getMainLooper()).postDelayed({
            Log.d(TAG, "üîÑ Servis yeniden ba≈ülatƒ±lƒ±yor...")
            startForegroundWatcher(this@ForegroundAppWatcherService)
        }, RESTART_DELAY)

        super.onDestroy()
    }

    override fun onBind(intent: Intent?): IBinder? = null

    // ---------------------- NOTIFICATION YAPILARI ----------------------

    /** Foreground servisi i√ßin bildirim kanalƒ± olu≈üturur (Android 8+). */
    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                CHANNEL_ID,
                "Uygulama Takip Servisi",
                NotificationManager.IMPORTANCE_LOW
            ).apply {
                description = "√ñnde √ßalƒ±≈üan uygulamalarƒ± takip eder"
                setShowBadge(false)
            }
            val manager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            manager.createNotificationChannel(channel)
        }
    }

    /** Servisin sistem tepsisinde g√∂stereceƒüi bildirim. */
    private fun createNotification(): Notification {
        val notificationIntent = Intent(this, HomeActivity::class.java)
        val pendingIntent = PendingIntent.getActivity(
            this, 0, notificationIntent, PendingIntent.FLAG_IMMUTABLE
        )

        return NotificationCompat.Builder(this, CHANNEL_ID)
            .setContentTitle("MindClear Aktif")
            .setContentText("Uygulama kullanƒ±mƒ± takip ediliyor")
            .setSmallIcon(R.drawable.ic_launcher_foreground)
            .setPriority(NotificationCompat.PRIORITY_LOW)
            .setOngoing(true)
            .setAutoCancel(false)
            .setContentIntent(pendingIntent)
            .build()
    }
}
