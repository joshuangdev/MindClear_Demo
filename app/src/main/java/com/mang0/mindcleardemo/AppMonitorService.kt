package com.mang0.mindcleardemo

import android.accessibilityservice.AccessibilityService
import android.content.Intent
import android.util.Log
import android.view.accessibility.AccessibilityEvent
import java.util.Calendar

// AccessibilityService, cihazda hangi uygulamanÄ±n aktif olduÄŸunu izlemek iÃ§in kullanÄ±lÄ±r.
// Bu sÄ±nÄ±f, belirli uygulamalarÄ±n kullanÄ±mÄ±nÄ± sÄ±nÄ±rlandÄ±rmak veya engellemek iÃ§in tasarlanmÄ±ÅŸ.
class AppMonitorService : AccessibilityService() {

    private val TAG = "AppMonitorService" // Log Ã§Ä±ktÄ±larÄ± iÃ§in etiket

    // companion object: static benzeri alanlar tutmak iÃ§in kullanÄ±lÄ±r
    // Burada son engelleme veya sayaÃ§ artÄ±ÅŸÄ±nÄ± hatÄ±rlamak iÃ§in kullanÄ±lÄ±yor
    companion object {
        private var lastBlockedPackage: String? = null // Son engellenen uygulamanÄ±n paket adÄ±
        private var lastBlockTime: Long = 0            // Son engelleme zamanÄ± (ms cinsinden)

        private var lastIncrementedPackage: String? = null // Son sayacÄ± artÄ±rÄ±lan uygulama
        private var lastIncrementTime: Long = 0            // Son sayaÃ§ artÄ±ÅŸ zamanÄ±
        private const val DEBOUNCE_TIME_MS = 1500          // TekrarlamayÄ± Ã¶nlemek iÃ§in 1.5 saniye bekleme sÃ¼resi
    }

    // Bu metod, sistemde belirli olaylar gerÃ§ekleÅŸtiÄŸinde (Ã¶rneÄŸin pencere deÄŸiÅŸimi) tetiklenir
    override fun onAccessibilityEvent(event: AccessibilityEvent?) {
        // Sadece pencere durumu deÄŸiÅŸtiÄŸinde ilgileniyoruz (uygulama deÄŸiÅŸimi)
        if (event?.eventType != AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED) {
            return // DiÄŸer event tÃ¼rlerini yok say
        }

        val packageName = event.packageName?.toString() ?: return // Paket adÄ±nÄ± al
        val className = event.className?.toString() ?: return     // Etkilenen sÄ±nÄ±f adÄ±

        // Kendi uygulamamÄ±zÄ± veya ana ekranÄ± izleme dÄ±ÅŸÄ± bÄ±rakÄ±yoruz
        if (packageName == applicationContext.packageName || isLauncher(packageName)) {
            return
        }

        // AppStatsManager Ã¼zerinden bu uygulama izleniyor mu kontrol et
        // EÄŸer takip edilmiyorsa (null dÃ¶nerse), iÅŸlem yapmadan Ã§Ä±k
        val stat = AppStatsManager.getStat(this, packageName) ?: return

        // --- Buradan sonrasÄ±, sadece izlenen uygulamalar iÃ§in Ã§alÄ±ÅŸÄ±r ---
        Log.d(TAG, "Ä°zlenen uygulama aÃ§Ä±ldÄ±: $packageName")

        // ğŸ”¹ 1. GÃœN KONTROLÃœ: UygulamanÄ±n bugÃ¼n kullanÄ±lmasÄ±na izin var mÄ±?
        val today = Calendar.getInstance().get(Calendar.DAY_OF_WEEK)
        if (today !in stat.allowedDays) {
            Log.w(TAG, "$packageName iÃ§in bugÃ¼n izin verilmeyen bir gÃ¼n. Engelleniyor.")
            showBlockScreenIfNeeded(packageName, stat.blockReason) // Engelleme ekranÄ± gÃ¶ster
            return // BaÅŸka kontrol yapma, zaten engellendi
        }

        // ğŸ”¹ 2. LÄ°MÄ°T KONTROLÃœ: GÃ¼nlÃ¼k aÃ§Ä±lma hakkÄ± sÄ±nÄ±rÄ±na ulaÅŸÄ±ldÄ± mÄ±?
        val limit = stat.allowedLaunchesPerDay
        if (limit > 0 && stat.launchesToday >= limit) {
            Log.w(TAG, "$packageName iÃ§in gÃ¼nlÃ¼k aÃ§Ä±lma limiti ($limit) aÅŸÄ±ldÄ±. Engelleniyor.")

            // AynÄ± uygulama tekrar tekrar engellendiÄŸinde gereksiz sayaÃ§ artÄ±ÅŸÄ±nÄ± Ã¶nle
            if (lastBlockedPackage != packageName) {
                stat.blockedAttempts++ // Engellenme sayÄ±sÄ±nÄ± artÄ±r
                AppStatsManager.saveStat(this, stat) // GÃ¼ncellenmiÅŸ veriyi kaydet
            }

            showBlockScreenIfNeeded(packageName, stat.blockReason)
            return
        }

        // ğŸ”¹ 3. SAYAÃ‡ ARTIRMA: Uygulama engellenmediyse, aÃ§Ä±lma sayÄ±sÄ±nÄ± bir artÄ±r.
        val currentTime = System.currentTimeMillis()

        // EÄŸer kÄ±sa sÃ¼re iÃ§inde (1.5 sn) aynÄ± uygulama zaten sayÄ±ldÄ±ysa, tekrar sayma
        if (currentTime - lastIncrementTime < DEBOUNCE_TIME_MS && lastIncrementedPackage == packageName) {
            return
        }

        // Her ÅŸey yolundaysa sayaÃ§ artÄ±r
        lastIncrementTime = currentTime
        lastIncrementedPackage = packageName

        stat.launchesToday++ // GÃ¼nlÃ¼k aÃ§Ä±lma sayÄ±sÄ±nÄ± artÄ±r
        AppStatsManager.saveStat(this, stat) // GÃ¼ncel deÄŸeri kaydet
        Log.i(TAG, "SayaÃ§ artÄ±rÄ±ldÄ±: $packageName -> ${stat.launchesToday} / $limit")
    }

    /**
     * Engelleme ekranÄ±nÄ± yalnÄ±zca gerekli durumlarda gÃ¶sterir.
     * AynÄ± uygulama iÃ§in kÄ±sa sÃ¼rede tekrar gÃ¶sterilmesini Ã¶nler.
     */
    private fun showBlockScreenIfNeeded(packageName: String, reason: String?) {
        val currentTime = System.currentTimeMillis()

        // AynÄ± uygulama iÃ§in 1.5 saniye iÃ§inde tekrar engelleme ekranÄ± aÃ§mayÄ± engelle
        if (currentTime - lastBlockTime < DEBOUNCE_TIME_MS && lastBlockedPackage == packageName) {
            return
        }

        // Engelleme zamanÄ±nÄ± ve uygulamayÄ± gÃ¼ncelle
        lastBlockTime = currentTime
        lastBlockedPackage = packageName

        // Engelleme ekranÄ±nÄ± (BlockedActivity) baÅŸlat
        val intent = Intent(this, BlockedActivity::class.java).apply {
            addFlags(Intent.FLAG_ACTIVITY_NEW_TASK) // Activity dÄ±ÅŸÄ±ndan baÅŸlatmak iÃ§in gerekli flag
            putExtra("BLOCK_REASON", reason ?: "Bu uygulamanÄ±n kullanÄ±m limiti doldu.") // VarsayÄ±lan mesaj
        }
        startActivity(intent)
    }

    // Servis kesilirse sistem tarafÄ±ndan Ã§aÄŸrÄ±lÄ±r (Ã¶rneÄŸin eriÅŸilebilirlik devre dÄ±ÅŸÄ± bÄ±rakÄ±ldÄ±ÄŸÄ±nda)
    override fun onInterrupt() {
        Log.w(TAG, "EriÅŸilebilirlik Servisi kesintiye uÄŸradÄ±.")
    }

    // Servis baÅŸarÄ±yla baÅŸlatÄ±ldÄ±ÄŸÄ±nda Ã§aÄŸrÄ±lÄ±r
    override fun onServiceConnected() {
        super.onServiceConnected()
        Log.i(TAG, "EriÅŸilebilirlik Servisi baÅŸarÄ±yla baÄŸlandÄ±!")
    }

    /**
     * Verilen paket adÄ±nÄ±n bir launcher (ana ekran) olup olmadÄ±ÄŸÄ±nÄ± kontrol eder.
     * BÃ¶ylece sistemin ana ekranÄ± veya launcher uygulamalarÄ± izlenmez.
     */
    private fun isLauncher(packageName: String): Boolean {
        val intent = Intent(Intent.ACTION_MAIN).apply { addCategory(Intent.CATEGORY_HOME) }
        val resolveInfo = packageManager.resolveActivity(intent, 0)
        return resolveInfo != null && resolveInfo.activityInfo.packageName == packageName
    }
}
